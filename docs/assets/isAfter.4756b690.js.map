{"version":3,"file":"isAfter.4756b690.js","sources":["../../node_modules/date-fns/addDays.mjs","../../node_modules/date-fns/isAfter.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date that should be after the other one to return true\n * @param dateToCompare - The date to compare with\n *\n * @returns The first date is after the second date\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\nexport function isAfter(date, dateToCompare) {\n  const _date = toDate(date);\n  const _dateToCompare = toDate(dateToCompare);\n  return _date.getTime() > _dateToCompare.getTime();\n}\n\n// Fallback for modularized imports:\nexport default isAfter;\n"],"names":["addDays","date","amount","_date","toDate","constructFrom","isAfter","dateToCompare","_dateToCompare"],"mappings":"iDAuBO,SAASA,EAAQC,EAAMC,EAAQ,CACpC,MAAMC,EAAQC,EAAOH,CAAI,EACzB,OAAI,MAAMC,CAAM,EAAUG,EAAcJ,EAAM,GAAG,GAC5CC,GAILC,EAAM,QAAQA,EAAM,QAAS,EAAGD,CAAM,EAC/BC,EACT,CCVO,SAASG,EAAQL,EAAMM,EAAe,CAC3C,MAAMJ,EAAQC,EAAOH,CAAI,EACnBO,EAAiBJ,EAAOG,CAAa,EAC3C,OAAOJ,EAAM,QAAO,EAAKK,EAAe,QAAO,CACjD","x_google_ignoreList":[0,1]}